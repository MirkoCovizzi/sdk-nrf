/*
 * Copyright (c) 2024 Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
 */

/* Generated by re2c 3.0
 *
 * re2c at_match.re -o at_match.c -W --no-debug-info
 */

#include <modem/at_parser.h>

struct at_token at_match(const char *at, const char **remainder)
{
	const char *cursor = at;
	const char *marker = NULL;

	/*!re2c
		re2c:define:YYCTYPE = "unsigned char";
		re2c:define:YYCURSOR = cursor;
		re2c:define:YYMARKER = marker;
		re2c:yyfill:enable = 0;

		CMD = [#%+][A-Za-z0-9]+;
		INT = [0-9]+;
		CRLF = "\r\n";
		SPACE = " ";
		COMMA = ",";
		QUOTE = "\"";
		STR = [A-Za-z0-9][A-Za-z_\-.0-9 ]*;
		QUOTED_STR = QUOTE [^"\x00]* QUOTE;
		RANGE = (INT|QUOTED_STR) "-" (INT|QUOTED_STR);
		ARRAY_ELEM = (INT|RANGE|QUOTED_STR);
		ARRAY = "(" ARRAY_ELEM (COMMA ARRAY_ELEM)* ")";

		cmd_test    = "AT" CMD "=?";
		cmd_read    = "AT" CMD "?";
		cmd_set     = "AT" CMD? "="?;
		notif       = CRLF? CMD ":" SPACE?;
		int         = SPACE? [+\-]? INT COMMA?;
		quoted_str  = SPACE? QUOTED_STR COMMA?;
		array       = SPACE? "(" (ARRAY_ELEM|ARRAY) (COMMA (ARRAY_ELEM|ARRAY))* ")" COMMA?;
		empty       = SPACE? COMMA;
		str         = CRLF? STR;
		clac        = ("AT" CMD CRLF)("AT" CMD CRLF)+;
		resp        = CRLF (("OK"|"ERROR"|"+CME ERROR: " INT|"+CMS ERROR: " INT) CRLF)?;

		*           { return (struct at_token){ .type = AT_TOKEN_TYPE_INVALID }; }

		cmd_test
		{
			int off_len = 2;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_CMD_TEST
			};
		}

		cmd_read
		{
			int off_len = 1;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_CMD_READ
			};
		}

		cmd_set
		{
			char last = *(cursor - 1);
			int off_len = last == '=' ? 1 : 0;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_CMD_SET
			};
		}

		notif
		{
			char first = *at;
			char last = *(cursor - 1);
			int off_start = first == '\r' ? 2 : 0;
			/* `+1` accounts for colon. */
			int off_len = (last == ' ' ? 1 : 0) + off_start + 1;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at + off_start, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_NOTIF
			};
		}

		int
		{
			char first = *at;
			char last = *(cursor - 1);
			int off_start = first == ' ' ? 1 : 0;
			int off_len = (last == ',' ? 1 : 0) + off_start;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at + off_start, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_INT,
				.variant = last == ',' ? AT_TOKEN_VARIANT_COMMA :
							 AT_TOKEN_VARIANT_NO_COMMA
			};
		}

		quoted_str
		{
			char first = *at;
			char last = *(cursor - 1);
			/* `+1` accounts for leading quote. */
			int off_start = (first == ' ' ? 1 : 0) + 1;
			/* `+1` accounts for trailing quote. */
			int off_len = (last == ',' ? 1 : 0) + off_start + 1;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at + off_start, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_QUOTED_STRING,
				.variant = last == ',' ? AT_TOKEN_VARIANT_COMMA :
							 AT_TOKEN_VARIANT_NO_COMMA
			};
		}

		array
		{
			char first = *at;
			char last = *(cursor - 1);
			/* `+1` accounts for leading parenthesis. */
			int off_start = (first == ' ' ? 1 : 0) + 1;
			/* `+1` accounts for trailing parenthesis. */
			int off_len = (last == ',' ? 1 : 0) + off_start + 1;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at + off_start, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_ARRAY,
				.variant = last == ',' ? AT_TOKEN_VARIANT_COMMA :
							 AT_TOKEN_VARIANT_NO_COMMA
			};
		}

		empty
		{
			int off_len = 1;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_EMPTY, .variant = AT_TOKEN_VARIANT_COMMA
			};
		}

		str
		{
			char first = *at;
			char last = *(cursor - 1);
			int off_start = first == '\r' ? 2 : (first == ' ' ? 1 : 0);
			int off_len = (last == ' ' ? 1 : 0) + off_start;

			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at + off_start, .len = cursor - at - off_len,
				.type = AT_TOKEN_TYPE_STRING
			};
		}

		clac
		{
			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at, .len = cursor - at, .type = AT_TOKEN_TYPE_STRING
			};
		}

		resp
		{
			if (remainder) *remainder = cursor;
			return (struct at_token){
				.start = at, .len = cursor - at, .type = AT_TOKEN_TYPE_RESP
			};
		}
	*/
}
